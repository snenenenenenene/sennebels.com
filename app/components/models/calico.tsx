/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: JohnElkes (https://sketchfab.com/JohnElkes)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/minecraft-calico-cat-b73100dea68e4e3ca423014d1d957ea5
Title: minecraft calico cat
*/

import React, { useRef, useState, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import * as THREE from 'three'

export function Model(props: any & { 
  onModelClick?: () => void;
  isHovered?: boolean;
}) {
  const group = useRef<THREE.Group>(null)
  const { nodes, materials, animations } = useGLTF('/models/calico.glb')
  const { actions } = useAnimations(animations as THREE.AnimationClip[], group)

  // Store original emissive color
  const originalEmissive = useRef<THREE.Color | null>(null);

  // Effect to handle hover glow via emissive property
  useEffect(() => {
    // Ensure material exists and is a standard mesh material
    const material = (materials as any).material_0;
    if (material instanceof THREE.MeshStandardMaterial) {
      // Store original color only once
      if (originalEmissive.current === null) {
        originalEmissive.current = material.emissive.clone();
      }
      
      // Set emissive color based on hover state
      if (props.isHovered) {
        material.emissive.set(0x333333); // Set to a dim gray for a subtle glow
      } else {
        // Restore original emissive color
        material.emissive.copy(originalEmissive.current);
      }
    } else if (material) {
      console.warn("Calico model material is not MeshStandardMaterial, cannot apply emissive glow.");
    }

    // Cleanup function to restore original color if component unmounts while hovered
    return () => {
      if (material instanceof THREE.MeshStandardMaterial && originalEmissive.current) {
        material.emissive.copy(originalEmissive.current);
      }
    };
  }, [props.isHovered, materials]); // Depend on hover state and materials

  const handleClick = (event: any) => {
    if (event?.stopPropagation) {
      event.stopPropagation();
    } 
    if (props.onModelClick) {
      props.onModelClick()
    }
  }

  // Explicitly extract isHovered from props to avoid spreading it
  const { isHovered, ...restProps } = props;

  return (
    <group 
      ref={group} 
      {...restProps} // Spread remaining props
      dispose={null} 
      onClick={handleClick}
      scale={1.5}
    >
      <group name="Sketchfab_Scene">
        <group
          name="Sketchfab_model"
          rotation={[-Math.PI / 2, 0, 0]}
          userData={{ name: 'Sketchfab_model' }}>
          <group name="root" userData={{ name: 'root' }}>
            <group
              name="GLTF_SceneRootNode"
              rotation={[Math.PI / 2, 0, 0]}
              userData={{ name: 'GLTF_SceneRootNode' }}>
              <group name="_21" userData={{ name: '_21' }}>
                <group name="body_20" position={[0, 0.438, 0.063]} userData={{ name: 'body_20' }}>
                  <group
                    name="body_0"
                    rotation={[-Math.PI / 2, 0, 0]}
                    userData={{ name: 'body_0' }}>
                    <mesh
                      name="Object_6"
                      castShadow
                      receiveShadow
                      geometry={(nodes.Object_6 as any)?.geometry}
                      material={(materials as any).material_0}
                      userData={{ name: 'Object_6' }}
                    />
                  </group>
                  <group name="head_7" position={[0, 0.125, -0.625]} userData={{ name: 'head_7' }}>
                    <group
                      name="head_1"
                      position={[0, -0.563, 0.563]}
                      userData={{ name: 'head_1' }}>
                      <mesh
                        name="Object_9"
                        castShadow
                        receiveShadow
                        geometry={(nodes.Object_9 as any)?.geometry}
                        material={(materials as any).material_0}
                        userData={{ name: 'Object_9' }}
                      />
                    </group>
                    <group
                      name="head_2"
                      position={[0, -0.563, 0.563]}
                      userData={{ name: 'head_2' }}>
                      <mesh
                        name="Object_11"
                        castShadow
                        receiveShadow
                        geometry={(nodes.Object_11 as any)?.geometry}
                        material={(materials as any).material_0}
                        userData={{ name: 'Object_11' }}
                      />
                    </group>
                    <group
                      name="head_3"
                      position={[0, -0.563, 0.563]}
                      userData={{ name: 'head_3' }}>
                      <mesh
                        name="Object_13"
                        castShadow
                        receiveShadow
                        geometry={(nodes.Object_13 as any)?.geometry}
                        material={(materials as any).material_0}
                        userData={{ name: 'Object_13' }}
                      />
                    </group>
                    <group
                      name="head_4"
                      position={[0, -0.563, 0.563]}
                      userData={{ name: 'head_4' }}>
                      <mesh
                        name="Object_15"
                        castShadow
                        receiveShadow
                        geometry={(nodes.Object_15 as any)?.geometry}
                        material={(materials as any).material_0}
                        userData={{ name: 'Object_15' }}
                      />
                    </group>
                  </group>
                  <group
                    name="tail1_11"
                    position={[0, 0.125, 0.438]}
                    userData={{ name: 'tail1_11' }}>
                    <group name="tail1_8" rotation={[-0.829, 0, 0]} userData={{ name: 'tail1_8' }}>
                      <mesh
                        name="Object_18"
                        castShadow
                        receiveShadow
                        geometry={(nodes.Object_18 as any)?.geometry}
                        material={(materials as any).material_0}
                        userData={{ name: 'Object_18' }}
                      />
                    </group>
                    <group
                      name="tail2_10"
                      position={[0, -0.338, 0.369]}
                      rotation={[-1.658, 0, 0]}
                      userData={{ name: 'tail2_10' }}>
                      <group
                        name="tail2_9"
                        position={[0, -0.225, -0.869]}
                        userData={{ name: 'tail2_9' }}>
                        <mesh
                          name="Object_21"
                          castShadow
                          receiveShadow
                          geometry={(nodes.Object_21 as any)?.geometry}
                          material={(materials as any).material_0}
                          userData={{ name: 'Object_21' }}
                        />
                      </group>
                    </group>
                  </group>
                  <group
                    name="backLegL_13"
                    position={[-0.069, -0.063, 0.375]}
                    userData={{ name: 'backLegL_13' }}>
                    <group
                      name="backLegL_12"
                      position={[0.069, -0.375, -0.438]}
                      userData={{ name: 'backLegL_12' }}>
                      <mesh
                        name="Object_24"
                        castShadow
                        receiveShadow
                        geometry={(nodes.Object_24 as any)?.geometry}
                        material={(materials as any).material_0}
                        userData={{ name: 'Object_24' }}
                      />
                    </group>
                  </group>
                  <group
                    name="backLegR_15"
                    position={[0.069, -0.063, 0.375]}
                    userData={{ name: 'backLegR_15' }}>
                    <group
                      name="backLegR_14"
                      position={[-0.069, -0.375, -0.438]}
                      userData={{ name: 'backLegR_14' }}>
                      <mesh
                        name="Object_27"
                        castShadow
                        receiveShadow
                        geometry={(nodes.Object_27 as any)?.geometry}
                        material={(materials as any).material_0}
                        userData={{ name: 'Object_27' }}
                      />
                    </group>
                  </group>
                  <group
                    name="frontLegL_17"
                    position={[-0.075, 0.188, -0.313]}
                    userData={{ name: 'frontLegL_17' }}>
                    <group
                      name="frontLegL_16"
                      position={[0.075, -0.625, 0.25]}
                      userData={{ name: 'frontLegL_16' }}>
                      <mesh
                        name="Object_30"
                        castShadow
                        receiveShadow
                        geometry={(nodes.Object_30 as any)?.geometry}
                        material={(materials as any).material_0}
                        userData={{ name: 'Object_30' }}
                      />
                    </group>
                  </group>
                  <group
                    name="frontLegR_19"
                    position={[0.075, 0.188, -0.313]}
                    userData={{ name: 'frontLegR_19' }}>
                    <group
                      name="frontLegR_18"
                      position={[-0.075, -0.625, 0.25]}
                      userData={{ name: 'frontLegR_18' }}>
                      <mesh
                        name="Object_33"
                        castShadow
                        receiveShadow
                        geometry={(nodes.Object_33 as any)?.geometry}
                        material={(materials as any).material_0}
                        userData={{ name: 'Object_33' }}
                      />
                    </group>
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/calico.glb')
